export declare const ZMEvent: {
    kZMInitSetting: {
        event: string;
        error: {
            kInvalidParamError: {
                code: number;
                msg: string;
            };
        };
        system_info: (item?: string | undefined) => string | undefined;
        servers: (item: string[]) => string[];
        is_from_cache: (item: boolean) => boolean;
        project: (item?: string | undefined) => string | undefined;
        liveroom_version: (item?: string | undefined) => string | undefined;
        biz_type: (item: number) => number;
        lua_md5: (item?: string | undefined) => string | undefined;
        sev_env: (item?: string | undefined) => string | undefined;
        use_na: (item: number) => number;
    };
    kZMListener: {
        event: string;
    };
    kZMRoomContext: {
        event: string;
    };
    kZMHB: {
        event: string;
    };
    kZMSetDebug: {
        event: string;
        debug: (item?: string | undefined) => string | undefined;
    };
    kZMSetLog: {
        event: string;
        error: {
            kInvalidParamError: {
                code: number;
                msg: string;
            };
        };
        log_level: (level: string) => string;
        remote_log_level: (item?: string | undefined) => string | undefined;
        log_url: (item?: string | undefined) => string | undefined;
    };
    kZMOnListener: {
        event: string;
        listener: (item?: string | undefined) => string | undefined;
        error: {
            INPUT_PARAM: {
                code: number;
                msg: string;
            };
        };
    };
    kZMOffListener: {
        event: string;
        listener: (item?: string | undefined) => string | undefined;
        error: {
            INPUT_PARAM: {
                code: number;
                msg: string;
            };
        };
    };
    kZMLoginRoom: {
        event: string;
        room_id: (item?: string | undefined) => string | undefined;
        room_sid_string: (item?: string | undefined) => string | undefined;
        user_state_update: (item: number) => number;
        max_member_cnt: (item: number) => number;
        message: (item?: string | undefined) => string | undefined;
        token: (item?: string | undefined) => string | undefined;
        svr_env: (item?: string | undefined) => string | undefined;
        server: (item?: string | undefined) => string | undefined;
        try_cnt: (item: number) => number;
        room_mode: (item: number) => number;
        role: (item: number) => number;
        audience_create_room: (item: number) => number;
        liveroom_sid_string: (item?: string | undefined) => string | undefined;
        error: {
            ROOM_ID_NULL: {
                code: number;
                msg: string;
            };
            INPUT_PARAM: {
                code: number;
                msg: string;
            };
            ROOM_ID_TOO_LONG: {
                code: number;
                msg: string;
            };
            ROOM_ID_INVALID_CHARACTER: {
                code: number;
                msg: string;
            };
            USER_ID_NULL: {
                code: number;
                msg: string;
            };
            USER_ID_TOO_LONG: {
                code: number;
                msg: string;
            };
            USER_ID_INVALID_CHARACTER: {
                code: number;
                msg: string;
            };
            USER_NAME_NULL: {
                code: number;
                msg: string;
            };
            USER_NAME_TOO_LONG: {
                code: number;
                msg: string;
            };
            REPEATEDLY_LOGIN: {
                code: number;
                msg: string;
            };
            LOGIN_TIMEOUT: {
                code: number;
                msg: string;
            };
            INNER_ERROR: {
                code: number;
                msg: string;
            };
            NETWORK_BROKEN: {
                code: number;
                msg: string;
            };
        };
    };
    kZMSubLogin: {
        event: string;
        server: (item?: string | undefined) => string | undefined;
        room_id: (item?: string | undefined) => string | undefined;
        room_sid_string: (item?: string | undefined) => string | undefined;
    };
    kZMSwitchLogin: {
        event: string;
        sdk_zpush_sessionid_string: (item?: string | undefined) => string | undefined;
    };
    kZMLiveRoomEnter: {
        event: string;
    };
    kZegoLiveRoomConnect: {
        event: string;
    };
    kZMReNewToken: {
        event: string;
        error: {
            INPUT_PARAM: {
                code: number;
                msg: string;
            };
            NOT_LOGIN: {
                code: number;
                msg: string;
            };
        };
        token: (item?: string | undefined) => string | undefined;
    };
    kZMHbTimeout: {
        event: string;
    };
    kZMLogoutRoom: {
        event: string;
        error: {
            INPUT_PARAM: {
                code: number;
                msg: string;
            };
            ROOM_NOT_EXIST: {
                code: number;
                msg: string;
            };
        };
        room_id: (item?: string | undefined) => string | undefined;
        room_sid_string: (item?: string | undefined) => string | undefined;
        is_multi: (item: boolean) => boolean;
        is_send_cmd_net: (item: boolean) => boolean;
        liveroom_sid_string: (item?: string | undefined) => string | undefined;
    };
    kZMSwitchLogout: {
        event: string;
        error: {
            INPUT_PARAM: {
                code: number;
                msg: string;
            };
            ROOM_NOT_EXIST: {
                code: number;
                msg: string;
            };
        };
    };
    kZMQuitLiveroom: {
        event: string;
        error: {
            INPUT_PARAM: {
                code: number;
                msg: string;
            };
            ROOM_NOT_EXIST: {
                code: number;
                msg: string;
            };
        };
        is_multi: (item: boolean) => boolean;
        liveroom_sid_string: (item?: string | undefined) => string | undefined;
        sdk_zpush_sessionid_string: (item?: string | undefined) => string | undefined;
    };
    kZMMultiLogout: {
        event: string;
        error: {
            INPUT_PARAM: {
                code: number;
                msg: string;
            };
            ROOM_NOT_EXIST: {
                code: number;
                msg: string;
            };
        };
    };
    kZMReLoginRoom: {
        event: string;
        error: {
            ROOM_ID_NULL: {
                code: number;
                msg: string;
            };
            ROOM_DISCONNECT: {
                code: number;
                msg: string;
            };
        };
        server: (item?: string | undefined) => string | undefined;
        try_cnt: (item: number) => number;
    };
    kZMTempBroken: {
        event: string;
    };
    kZMReconnect: {
        event: string;
        room_broken_time: (item: number) => number;
    };
    kZMSdkDisconnect: {
        event: string;
    };
    kZMKickout: {
        event: string;
        user_id: (item?: string | undefined) => string | undefined;
        kickout_reason: (item: number) => number;
        need_relogin: (item: number) => number;
        error: {};
    };
    kZMRoomHB: {
        event: string;
        room_id: (item?: string | undefined) => string | undefined;
        room_sid_string: (item?: string | undefined) => string | undefined;
        interval: (item: number) => number;
        stream_seq: (item: number) => number;
        server_user_seq: (item: number) => number;
        error: {
            NOT_LOGIN: {
                code: number;
                msg: string;
            };
            HB_TIMEOUT: {
                code: number;
                msg: string;
            };
        };
    };
    kZMRoomRecvUserUpdateInfo: {
        event: string;
        user_list_seq: (item: number) => number;
        update_user: (item: any) => any;
        error: {
            ROOM_NOT_EXIST: {
                code: number;
                msg: string;
            };
        };
    };
    kZegoListener: {
        event: string;
    };
    kZegoEnableMultiRoom: {
        event: string;
        is_multi: (item: boolean) => boolean;
        error: {
            kInvalidParamError: {
                code: number;
                msg: string;
            };
            kAlreadyLoginError: {
                code: number;
                msg: string;
            };
        };
    };
    kZMCloudSettingCache: {
        event: string;
        files: (item: any) => any;
    };
    kZMCloudSettingRefresh: {
        event: string;
        request_kv: (item: any) => any;
        files: (item: any) => any;
    };
    kZMCloudSettingRequest: {
        event: string;
        request_detail: (item: any) => any;
        files: (item: any) => any;
    };
    kZMGetCurrentUserList: {
        event: string;
        user_index: (item: number) => number;
        is_time_ascend: (item: boolean) => boolean;
        use_na: (item: number) => number;
    };
    kZegoConnConnect: {
        event: string;
        connect_id: (item?: string | undefined) => string | undefined;
        request_count: (item: number) => number;
        events: (item: any) => any;
    };
    kZegoConnDisConnect: {
        event: string;
        connect_id: (item?: string | undefined) => string | undefined;
        url: (item?: string | undefined) => string | undefined;
        connect_duration: (item: number) => number;
    };
    kZegoConnDispatch: {
        event: string;
        domain_list: (item: string[]) => string[];
    };
    kZegoRequest: {
        event: string;
        req_location: (item: any) => any;
    };
    kZegoSDKConfigInit: {
        event: string;
        trigger_reason: (item: any) => any;
        try_count: (item: number) => number;
    };
    kZegoSDKProxyConnect: {
        event: string;
        service_no: (item: number) => number;
        proxy_link_sources: (item: number) => number;
        recv_time: (item: number) => number;
        connect_stream: (item: number) => number;
    };
    kZegoSDKProxyBroken: {
        event: string;
        service_no: (item: number) => number;
    };
    kZegoSDKProxyDisconnect: {
        event: string;
        service_no: (item: number) => number;
    };
};
