import { LinkedList, ListNode } from '../src/zego.entity';
declare type MessageItem = {
    data: any;
    seq: number;
    deleted: boolean;
    sendTime: number;
    timeOut: number;
    success: Function | null;
    error: Function | null;
};
export declare class ZegoSocketService {
    private socket;
    sendCommandList: LinkedList<MessageItem>;
    sendCommandMap: {
        [index: number]: ListNode<MessageItem>;
    };
    private sendDataCheckOnceCount;
    private sendDataDropTimeout;
    private sendDataCheckTimer;
    private sendDataCheckInterval;
    ENV: number;
    constructor(ENV: number);
    createSocket(server: string): void;
    closeSocket(): void;
    isDisConnect(): boolean;
    sendMessage(header: {
        appid: number;
        seq: number;
        cmd: string;
        [index: string]: string | number;
    }, body: {
        [index: string]: string | number;
    }, success?: Function | null, error?: Function | null, option?: {
        timeOut: number;
    }): number;
    sendPB(msg: ArrayBuffer): boolean;
    private checkSendMessageList;
    private checkMessageListTimeout;
    startCheck(): void;
    stopCheck(): void;
    openHandler(hander: (e: any) => void): void;
    responseHandler(): void;
    closeHandler(handler: (e: any) => void): void;
    errorHandler(handler: (e: any) => void): void;
    onMessage(msg: any): void;
}
export {};
