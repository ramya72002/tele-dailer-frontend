import { DeviceInfo, ZegoLogger, ZegoDataReport, ZegoError, NetType } from '../src/zego.entity';
export declare class ClientUtil {
    static checkConfigParam(appid: number, server: string | Array<string>, logger: ZegoLogger): boolean;
    static checkPriConfigParam(appid: number, dispatchServer: string, deviceInfo: DeviceInfo, anType: number, logger: ZegoLogger): boolean;
    static checkIllegalCharacters(str: string): boolean;
    static isUrl(str: string): boolean;
    static registerCallback(fName: string, option: {
        success?: Function;
        error?: Function;
    }, callbackList: {
        [index: string]: Function;
    }): void;
    static actionErrorCallback(fName: string, callbackList: {
        [index: string]: Function;
    }): Function;
    static actionSuccessCallback(fName: string, callbackList: {
        [index: string]: Function;
    }): Function;
    static logReportCallback(logEvent: string, dataReport: ZegoDataReport, reportSeq: number, callbackList: {
        [index: string]: Function;
    }): void;
    static proxyRes(dataReport: ZegoDataReport, reportSeq: number, resolve: any, reject: any): any;
    /**
         错误管理
         */
    static getServerError(code: number): ZegoError;
    static unregisterCallback(fName: string, callbackList: {
        [index: string]: Function;
    }): void;
    static decodeServerError(code: number, msg: string): {
        code: number;
        message: string;
    };
    static getLiveRoomError(code: number, useNetAgent?: boolean): string;
    static getKickoutError(code: number, useNetAgent: boolean): {
        code: number;
        message: string;
        name?: string;
    };
    static dataReportEvent(dataReport: ZegoDataReport, reportSeq: number, reportName: string, eventName: string, args: any): void;
    static isKeepTryLogin(code: number): boolean;
    static mergeUserList(logger: ZegoLogger, oldUserList: any[], newUserList: any[], callbackResult: (addUserList: any[], delUserList: any[]) => void): void;
    static checkInteger(num: number | undefined, positive?: boolean): boolean;
    static checkValidNumber(param: number, min?: number, max?: number): boolean;
    static generateRandumNumber(maxNum: number): number;
    static uuid(len?: number, radix?: number): string;
    static compareVersion(v1: string[] | string, v2: string | string[]): number;
    static getBrowser(): string;
    static isTestEnv(server: string): boolean;
    static getLogLevel(level: 'debug' | 'info' | 'warn' | 'error' | 'report' | 'disable'): number;
    static getUint64(byteOffset: number, littleEndian: boolean, dv: DataView): number;
    /**
     *  返回 token 过期时间点，单位 s
     */
    static decodeTokenExpire(token: string): number;
    static bin2hex(s: string): string;
    static getCanvasFingerprint(domain: string): string;
    static generateUUID(env?: number): string;
    static getNetType(): string;
    static getNetTypeNum(): NetType;
    static encryptStores(originString: string, secret: string): string;
    static decryptStores(ciphertext: string, secret: string): string;
    static getCurrentTime(): string;
    static isRightServerForAppid(server: string, appid: number): boolean;
}
